# GNU General Public License v3.0
# Copyright 2024 Xin Huang
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, please see
#
#    https://www.gnu.org/licenses/gpl-3.0.en.html


import os, yaml
import pandas as pd
from gaia.utils import parse_ind_file
from gaia.utils.multiprocessing import mp_manager
from gaia.utils.generators import GenomicDataGenerator
from gaia.utils.preprocessors import FeatureVectorsPreprocessor


def lr_preprocess(vcf_file: str, chr_name: str, ref_ind_file: str, tgt_ind_file: str, 
                  win_len: int, win_step: int, feature_config: str, 
                  output_dir: str, output_prefix: str = 'lr', nprocess: int = 1, 
                  ploidy: int = 2, is_phased: bool = True, anc_allele_file: str = None) -> None:
    """
    Preprocess genomic data to generate feature vectors for machine learning models.

    This function orchestrates the preprocessing pipeline by initializing a genomic data generator
    and a feature vector preprocessor. It utilizes multiprocessing to efficiently process large
    genomic datasets, generating feature vectors based on the specified configuration.

    Parameters
    ----------
    vcf_file : str
        Path to the VCF file containing genomic variants.
    chr_name : str
        Name of the chromosome to process.
    ref_ind_file : str
        Path to the file listing reference individual identifiers.
    tgt_ind_file : str
        Path to the file listing target individual identifiers.
    win_len : int
        Length of the sliding window for analysis, in base pairs.
    win_step : int
        Step size for the sliding window, in base pairs.
    feature_config : str
        Path to the YAML configuration file specifying the features to be computed.
    output_dir : str
        Directory where output files will be saved.
    output_prefix : str, optional
        Prefix for the output files generated by the preprocessor. Default: 'lr'.
    nprocess : int, optional
        Number of worker processes to use for parallel processing. Default: 1.
    ploidy : int, optional
        Ploidy of the samples, typically 2 for diploid organisms. Default: 2.
    is_phased : bool, optional
        Indicates whether the genomic data is phased. Default: True.
    anc_allele_file : str, optional
        Path to the file containing ancestral allele information. Default: None.

    Raises
    ------
    ValueError
        If any of the provided parameters are invalid, such as negative window lengths or step sizes.

    """
    if nprocess <= 0:
        raise ValueError("Number of processes must be greater than 0.")

    generator = GenomicDataGenerator(
        vcf_file=vcf_file,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        anc_allele_file=anc_allele_file,
        ploidy=ploidy,
        is_phased=is_phased,
        chr_name=chr_name,
        win_len=win_len,
        win_step=win_step,
    )

    preprocessor = FeatureVectorsPreprocessor(
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        feature_config=feature_config,
    )
    res = mp_manager(job=preprocessor, data_generator=generator, nprocess=nprocess)

    if res == 'error': 
        raise SystemExit('Some errors occurred, stopping the program ...')

    res.sort(key=lambda x: (x['Chromosome'], x['Start'], x['End']))

    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, f'{output_prefix}.features')
    pd.DataFrame(res).to_csv(output_file, sep="\t", index=False)
