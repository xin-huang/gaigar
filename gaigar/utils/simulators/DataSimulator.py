# GNU General Public License v3.0
# Copyright 2024 Xin Huang
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, please see
#
#    https://www.gnu.org/licenses/gpl-3.0.en.html


from abc import ABC, abstractmethod


class DataSimulator(ABC):
    """
    Abstract base class for simulating data based on various demographic models and parameters.

    This class provides a common interface and initialization for different data simulation
    strategies. Subclasses must implement the `run` method to perform the actual simulation
    work based on the initialized parameters.

    """
    def __init__(self, demo_model_file: str, nref: int, ntgt: int, 
                 ref_id: str, tgt_id: str, src_id: str, ploidy: int,
                 seq_len: int, mut_rate: float, rec_rate: float, 
                 output_prefix: str, output_dir: str):
        """
        Initializes a new instance of the DataSimulator class with specified parameters for data simulation.

        Parameters
        ----------
        demo_model_file : str
            Path to the demographic model file, which defines the demographic history to simulate.
        nref : int
            Number of samples in the reference population.
        ntgt : int
            Number of samples in the target population.
        ref_id : str
            Identifier for the reference population in the demographic model.
        tgt_id : str
            Identifier for the target population in the demographic model.
        src_id : str
            Identifier for the source population in the demographic model.
        ploidy : int
            Ploidy of the samples; typically 2 for diploid organisms.
        seq_len : int
            Length of the sequence to simulate, in base pairs.
        mut_rate : float
            Mutation rate per base pair per generation.
        rec_rate : float
            Recombination rate per base pair per generation.
        output_prefix : str
            Prefix for the output files generated by the simulation.
        output_dir : str
            Directory where the output files will be stored.

        """
        self.demo_model_file = demo_model_file
        self.nref = nref
        self.ntgt = ntgt
        self.ref_id = ref_id
        self.tgt_id = tgt_id
        self.src_id = src_id
        self.ploidy = ploidy
        self.seq_len = seq_len
        self.mut_rate = mut_rate
        self.rec_rate = rec_rate
        self.output_prefix = output_prefix
        self.output_dir = output_dir


    @abstractmethod
    def run(self, **kwargs):
        """
        Executes the simulation task.

        This method should be implemented by subclasses to perform the specific simulation work. It
        is called to start the simulation process based on the parameters initialized during the
        creation of the subclass instance. The exact behavior and side effects (such as file output)
        will depend on the subclass implementation.

        Parameters
        ----------
        **kwargs : dict
            Keyword arguments containing dynamic parameters for the simulation.

        Returns
        -------
        The method can return results or status information if applicable. This depends on the implementation
        details of each subclass.

        Raises
        ------
        Subclasses may raise exceptions if errors occur during the simulation process. Implementers should
        document any exceptions that their method implementation may raise.

        """
        pass
